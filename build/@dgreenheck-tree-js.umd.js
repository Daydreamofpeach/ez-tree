(function(c,d){typeof exports=="object"&&typeof module<"u"?d(exports,require("three")):typeof define=="function"&&define.amd?define(["exports","three"],d):(c=typeof globalThis<"u"?globalThis:c||self,d(c["@dgreenheck-tree-js"]={},c.THREE))})(this,function(c,d){"use strict";var N=Object.defineProperty;var W=(c,d,m)=>d in c?N(c,d,{enumerable:!0,configurable:!0,writable:!0,value:m}):c[d]=m;var w=(c,d,m)=>(W(c,typeof d!="symbol"?d+"":d,m),m);var m=typeof document<"u"?document.currentScript:null;function F(p){const g=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(p){for(const e in p)if(e!=="default"){const n=Object.getOwnPropertyDescriptor(p,e);Object.defineProperty(g,e,n.get?n:{enumerable:!0,get:()=>p[e]})}}return g.default=p,Object.freeze(g)}const t=F(d);class Q{constructor(g){w(this,"m_w",123456789);w(this,"m_z",987654321);w(this,"mask",4294967295);this.m_w=123456789+g&this.mask,this.m_z=987654321-g&this.mask}random(g=1,e=0){this.m_z=36969*(this.m_z&65535)+(this.m_z>>16)&this.mask,this.m_w=18e3*(this.m_w&65535)+(this.m_w>>16)&this.mask;let n=(this.m_z<<16)+(this.m_w&65535)>>>0;return n/=4294967296,(g-e)*n+e}}class z{constructor(g=new t.Vector3,e=new t.Euler,n=0,s=0,u=0,h=0,l=0){this.origin=g.clone(),this.orientation=e.clone(),this.length=n,this.radius=s,this.level=u,this.sectionCount=h,this.segmentCount=l}}const E={Birch:"birch",Oak:"oak",Pine:"pine",Willow:"willow"},V={Single:"single",Double:"double"},O={Ash:"ash",Aspen:"aspen",Beech:"beech",Evergreen:"evergreen",Oak:"oak"},j={Ash:"ash",Aspen:"aspen",Beech:"beech",Pine:"pine",Oak:"oak"},x={Deciduous:"deciduous",Evergreen:"evergreen"};class C{constructor(){this.seed=0,this.type=x.Deciduous,this.bark={type:E.Oak,tint:16777215,flatShading:!1,textured:!0,textureScale:{x:1,y:1}},this.branch={levels:3,angle:{1:70,2:60,3:60},children:{0:7,1:7,2:5},force:{direction:{x:0,y:1,z:0},strength:.01},gnarliness:{0:.15,1:.2,2:.3,3:.02},length:{0:20,1:20,2:10,3:1},radius:{0:1.5,1:.7,2:.7,3:.7},sections:{0:12,1:10,2:8,3:6},segments:{0:8,1:6,2:4,3:3},start:{1:.4,2:.3,3:.3},taper:{0:.7,1:.7,2:.7,3:.7},twist:{0:0,1:0,2:0,3:0}},this.leaves={type:O.Oak,billboard:V.Double,angle:10,count:1,start:0,size:2.5,sizeVariance:.7,tint:16777215,alphaTest:.5}}}const _={bark:{birch:{ao:"../src/textures/bark/birch_ao_1k.jpg",color:"../src/textures/bark/birch_color_1k.jpg",height:"../src/textures/bark/birch_height_1k.jpg",normal:"../src/textures/bark/birch_normal_1k.jpg",roughness:"../src/textures/bark/birch_roughness_1k.jpg"},oak:{ao:"../src/textures/bark/oak_ao_1k.jpg",color:"../src/textures/bark/oak_color_1k.jpg",height:"../src/textures/bark/oak_height_1k.jpg",normal:"../src/textures/bark/oak_normal_1k.jpg",roughness:"../src/textures/bark/oak_roughness_1k.jpg"},pine:{ao:"../src/textures/bark/pine_ao_1k.jpg",color:"../src/textures/bark/pine_color_1k.jpg",height:"../src/textures/bark/pine_height_1k.jpg",normal:"../src/textures/bark/pine_normal_1k.jpg",roughness:"../src/textures/bark/pine_roughness_1k.jpg"},willow:{ao:"../src/textures/bark/willow_ao_1k.jpg",color:"../src/textures/bark/willow_color_1k.jpg",height:"../src/textures/bark/willow_height_1k.jpg",normal:"../src/textures/bark/willow_normal_1k.jpg",roughness:"../src/textures/bark/willow_roughness_1k.jpg"}},leaves:{ash:"../src/textures/leaves/ash.png",aspen:"../src/textures/leaves/aspen.png",beech:"../src/textures/leaves/beech.png",evergreen:"../src/textures/leaves/evergreen.png",oak:"../src/textures/leaves/oak.png"}},$={seed:31701,type:"deciduous",bark:{type:"oak",tint:13552830,flatShading:!1,textured:!0,textureScale:{x:1,y:3}},branch:{levels:3,angle:{1:48,2:75,3:60},children:{0:7,1:4,2:3},force:{direction:{x:0,y:1,z:0},strength:0},gnarliness:{0:.18,1:.25,2:.2,3:.09},length:{0:20,1:18,2:9.51,3:4.6},radius:{0:1.5,1:.63,2:.76,3:.7},sections:{0:12,1:10,2:10,3:10},segments:{0:8,1:6,2:4,3:3},start:{1:.12,2:.33,3:0},taper:{0:.7,1:.7,2:.7,3:.7},twist:{0:.13,1:-.07,2:0,3:0}},leaves:{type:"ash",billboard:"double",angle:55,count:6,start:0,size:2.665,sizeVariance:.717,tint:16777215,alphaTest:.5}},L={seed:17124,type:"deciduous",bark:{type:"oak",tint:11902609,flatShading:!1,textured:!0,textureScale:{x:1,y:10}},branch:{levels:3,angle:{1:54,2:48,3:60},children:{0:5,1:7,2:5},force:{direction:{x:0,y:1,z:0},strength:0},gnarliness:{0:-.04,1:.32,2:.29,3:.02},length:{0:15.59,1:12.66,2:11.93,3:1},radius:{0:2,1:.69,2:.41,3:.7},sections:{0:16,1:16,2:8,3:1},segments:{0:8,1:6,2:4,3:3},start:{1:.19,2:.21,3:.54},taper:{0:.49,1:.43,2:.7,3:.7},twist:{0:.06,1:-.12,2:0,3:0}},leaves:{type:"oak",billboard:"double",angle:10,count:3,start:0,size:2.125,sizeVariance:.7,tint:10546069,alphaTest:.5}},q={seed:11744,type:"evergreen",bark:{type:"pine",tint:16761758,flatShading:!1,textured:!0,textureScale:{x:1,y:1}},branch:{levels:1,angle:{1:117,2:60,3:60},children:{0:91,1:7,2:5},force:{direction:{x:0,y:1,z:0},strength:0},gnarliness:{0:.05,1:.08,2:0,3:0},length:{0:39.55,1:12.12,2:10,3:1},radius:{0:.55,1:.41,2:.7,3:.7},sections:{0:12,1:10,2:8,3:6},segments:{0:8,1:6,2:4,3:3},start:{1:.16,2:.3,3:.3},taper:{0:.7,1:.7,2:.7,3:.7},twist:{0:0,1:0,2:0,3:0}},leaves:{type:"evergreen",billboard:"double",angle:10,count:21,start:0,size:.965,sizeVariance:.7,tint:16777215,alphaTest:.5}};function P(p){switch(p){case j.Ash:return $;case j.Oak:return L;case j.Pine:return q;default:return null}}const T={},I=new t.TextureLoader,M=(p,g={x:1,y:1},e=null)=>{if(!T[p]){const s=new URL(p,typeof document>"u"&&typeof location>"u"?require("url").pathToFileURL(__filename).href:typeof document>"u"?location.href:m&&m.src||new URL("@dgreenheck-tree-js.umd.js",document.baseURI).href).href;T[p]=I.load(s)}const n=T[p];return n.wrapS=t.MirroredRepeatWrapping,n.wrapT=t.MirroredRepeatWrapping,n.repeat.x=g.x,n.repeat.y=1/g.y,e&&(n.colorSpace=e,n.premultiplyAlpha=!0),n};class R extends t.Group{constructor(e=new C){super();w(this,"rng");w(this,"options");w(this,"branchQueue",[]);this.branchesMesh=new t.Mesh,this.leavesMesh=new t.Mesh,this.add(this.branchesMesh),this.add(this.leavesMesh),this.options=e}loadPreset(e){this.options=P(e),this.generate()}generate(){for(this.branches={verts:[],normals:[],indices:[],uvs:[]},this.leaves={verts:[],normals:[],indices:[],uvs:[]},this.rng=new Q(this.options.seed),this.branchQueue.push(new z(new t.Vector3,new t.Euler,this.options.branch.length[0],this.options.branch.radius[0],0,this.options.branch.sections[0],this.options.branch.segments[0]));this.branchQueue.length>0;){const e=this.branchQueue.shift();this.generateBranch(e)}this.createBranchesGeometry(),this.createLeavesGeometry()}generateBranch(e){const n=this.branches.verts.length/3;let s=e.orientation.clone(),u=e.origin.clone(),h=e.length/e.sectionCount/(this.options.type==="Deciduous"?this.options.branch.levels-1:1),l=[];for(let r=0;r<=e.sectionCount;r++){let a=e.radius;r===e.sectionCount&&e.level===this.options.branch.levels?a=.001:this.options.type===x.Deciduous?a*=1-this.options.branch.taper[e.level]*(r/e.sectionCount):this.options.type===x.Evergreen&&(a*=1-r/e.sectionCount);let i;for(let f=0;f<e.segmentCount;f++){let v=2*Math.PI*f/e.segmentCount;const y=new t.Vector3(Math.cos(v),0,Math.sin(v)).multiplyScalar(a).applyEuler(s).add(u),k=new t.Vector3(Math.cos(v),0,Math.sin(v)).applyEuler(s).normalize(),S=new t.Vector2(f/e.segmentCount,r%2===0?0:1);this.branches.verts.push(...Object.values(y)),this.branches.normals.push(...Object.values(k)),this.branches.uvs.push(...Object.values(S)),f===0&&(i={vertex:y,normal:k,uv:S})}this.branches.verts.push(...Object.values(i.vertex)),this.branches.normals.push(...Object.values(i.normal)),this.branches.uvs.push(1,i.uv.y),l.push({origin:u.clone(),orientation:s.clone(),radius:a}),u.add(new t.Vector3(0,h,0).applyEuler(s));const o=Math.max(1,1/Math.sqrt(a))*this.options.branch.gnarliness[e.level];s.x+=this.rng.random(o,-o),s.z+=this.rng.random(o,-o);const b=new t.Quaternion().setFromEuler(s),A=new t.Quaternion().setFromAxisAngle(new t.Vector3(0,1,0),this.options.branch.twist[e.level]),B=new t.Quaternion().setFromUnitVectors(new t.Vector3(0,1,0),new t.Vector3().copy(this.options.branch.force.direction));b.multiply(A),b.rotateTowards(B,this.options.branch.force.strength/a),s.setFromQuaternion(b)}if(this.generateBranchIndices(n,e),this.options.type==="deciduous"){const r=l[l.length-1];e.level<this.options.branch.levels?this.branchQueue.push(new z(r.origin,r.orientation,this.options.branch.length[e.level+1],r.radius,e.level+1,e.sectionCount,e.segmentCount)):this.generateLeaf(r.origin,r.orientation)}e.level===this.options.branch.levels?this.generateLeaves(l):e.level<this.options.branch.levels&&this.generateChildBranches(this.options.branch.children[e.level],e.level+1,l)}generateChildBranches(e,n,s){const u=this.rng.random();for(let h=0;h<e;h++){let l=this.rng.random(1,this.options.branch.start[n]);const r=Math.floor(l*(s.length-1));let a,i;a=s[r],r===s.length-1?i=a:i=s[r+1];const o=(l-r/(s.length-1))/(1/(s.length-1)),b=new t.Vector3().lerpVectors(a.origin,i.origin,o),A=this.options.branch.radius[n]*((1-o)*a.radius+o*i.radius),B=new t.Quaternion().setFromEuler(a.orientation),f=new t.Quaternion().setFromEuler(i.orientation),v=new t.Euler().setFromQuaternion(f.slerp(B,o)),y=2*Math.PI*(u+h/e),k=new t.Quaternion().setFromAxisAngle(new t.Vector3(1,0,0),this.options.branch.angle[n]/(180/Math.PI)),S=new t.Quaternion().setFromAxisAngle(new t.Vector3(0,1,0),y),D=new t.Quaternion().setFromEuler(v),G=new t.Euler().setFromQuaternion(D.multiply(S.multiply(k)));let U=this.options.branch.length[n]*(this.options.type===x.Evergreen?1-l:1);this.branchQueue.push(new z(b,G,U,A,n,this.options.branch.sections[n],this.options.branch.segments[n]))}}generateLeaves(e){const n=this.rng.random();for(let s=0;s<this.options.leaves.count;s++){let u=this.rng.random(1,this.options.leaves.start);const h=Math.floor(u*(e.length-1));let l,r;l=e[h],h===e.length-1?r=l:r=e[h+1];const a=(u-h/(e.length-1))/(1/(e.length-1)),i=new t.Vector3().lerpVectors(l.origin,r.origin,a),o=new t.Quaternion().setFromEuler(l.orientation),b=new t.Quaternion().setFromEuler(r.orientation),A=new t.Euler().setFromQuaternion(b.slerp(o,a)),B=2*Math.PI*(n+s/this.options.leaves.count),f=new t.Quaternion().setFromAxisAngle(new t.Vector3(1,0,0),this.options.leaves.angle/(180/Math.PI)),v=new t.Quaternion().setFromAxisAngle(new t.Vector3(0,1,0),B),y=new t.Quaternion().setFromEuler(A),k=new t.Euler().setFromQuaternion(y.multiply(v.multiply(f)));this.generateLeaf(i,k)}}generateLeaf(e,n){let s=this.leaves.verts.length/3,u=this.options.leaves.size*(1+this.rng.random(this.options.leaves.sizeVariance,-this.options.leaves.sizeVariance));const h=u,l=1.5*u,r=a=>{const i=[new t.Vector3(-h/2,l,0),new t.Vector3(-h/2,0,0),new t.Vector3(h/2,0,0),new t.Vector3(h/2,l,0)].map(b=>b.applyEuler(new t.Euler(0,a,0)).applyEuler(n).add(e));this.leaves.verts.push(i[0].x,i[0].y,i[0].z,i[1].x,i[1].y,i[1].z,i[2].x,i[2].y,i[2].z,i[3].x,i[3].y,i[3].z);const o=new t.Vector3(0,0,1).applyEuler(n);this.leaves.normals.push(o.x,o.y,o.z,o.x,o.y,o.z,o.x,o.y,o.z,o.x,o.y,o.z),this.leaves.uvs.push(0,1,0,0,1,0,1,1),this.leaves.indices.push(s,s+1,s+2,s,s+2,s+3),s+=4};r(0),this.options.leaves.billboard===V.Double&&r(Math.PI/2)}generateBranchIndices(e,n){let s,u,h,l;const r=n.segmentCount+1;for(let a=0;a<n.sectionCount;a++)for(let i=0;i<n.segmentCount;i++)s=e+a*r+i,u=e+a*r+(i+1),h=s+r,l=u+r,this.branches.indices.push(s,h,u,u,h,l)}createBranchesGeometry(){const e=new t.BufferGeometry;e.setAttribute("position",new t.BufferAttribute(new Float32Array(this.branches.verts),3)),e.setAttribute("normal",new t.BufferAttribute(new Float32Array(this.branches.normals),3)),e.setAttribute("uv",new t.BufferAttribute(new Float32Array(this.branches.uvs),2)),e.setIndex(new t.BufferAttribute(new Uint16Array(this.branches.indices),1)),e.computeBoundingSphere();const n=new t.MeshStandardMaterial({name:"branches",flatShading:this.options.bark.flatShading,color:this.options.bark.tint});if(this.branchesMesh.geometry.dispose(),this.branchesMesh.geometry=e,this.branchesMesh.material.dispose(),this.branchesMesh.material=n,this.branchesMesh.castShadow=!0,this.branchesMesh.receiveShadow=!0,this.options.bark.textured){const s=this.options.bark.textureScale;this.branchesMesh.material.aoMap=M(_.bark[this.options.bark.type].ao,s),this.branchesMesh.material.map=M(_.bark[this.options.bark.type].color,s),this.branchesMesh.material.normalMap=M(_.bark[this.options.bark.type].normal,s),this.branchesMesh.material.roughnessMap=M(_.bark[this.options.bark.type].roughness,s)}}createLeavesGeometry(){const e=new t.BufferGeometry;e.setAttribute("position",new t.BufferAttribute(new Float32Array(this.leaves.verts),3)),e.setAttribute("uv",new t.BufferAttribute(new Float32Array(this.leaves.uvs),2)),e.setIndex(new t.BufferAttribute(new Uint16Array(this.leaves.indices),1)),e.computeVertexNormals(),e.computeBoundingSphere();const n=new t.MeshStandardMaterial({name:"leaves",color:this.options.leaves.tint,side:t.DoubleSide,alphaTest:this.options.leaves.alphaTest});this.leavesMesh.geometry.dispose(),this.leavesMesh.geometry=e,this.leavesMesh.material.dispose(),this.leavesMesh.material=n,this.leavesMesh.material.map=M(_.leaves[this.options.leaves.type],new t.Vector2(1,1),t.SRGBColorSpace),this.leavesMesh.castShadow=!0,this.leavesMesh.receiveShadow=!0}}c.BarkType=E,c.Billboard=V,c.LeafType=O,c.Presets=j,c.Tree=R,c.TreeType=x,Object.defineProperty(c,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=@dgreenheck-tree-js.umd.js.map
