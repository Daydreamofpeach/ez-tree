(function(u,p){typeof exports=="object"&&typeof module<"u"?p(exports,require("three")):typeof define=="function"&&define.amd?define(["exports","three"],p):(u=typeof globalThis<"u"?globalThis:u||self,p(u["@dgreenheck-tree-js"]={},u.THREE))})(this,function(u,p){"use strict";var D=Object.defineProperty;var G=(u,p,b)=>p in u?D(u,p,{enumerable:!0,configurable:!0,writable:!0,value:b}):u[p]=b;var v=(u,p,b)=>(G(u,typeof p!="symbol"?p+"":p,b),b);var b=typeof document<"u"?document.currentScript:null;function F(m){const g=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(m){for(const e in m)if(e!=="default"){const s=Object.getOwnPropertyDescriptor(m,e);Object.defineProperty(g,e,s.get?s:{enumerable:!0,get:()=>m[e]})}}return g.default=m,Object.freeze(g)}const t=F(p);class z{constructor(g){v(this,"m_w",123456789);v(this,"m_z",987654321);v(this,"mask",4294967295);this.m_w=123456789+g&this.mask,this.m_z=987654321-g&this.mask}random(g=1,e=0){this.m_z=36969*(this.m_z&65535)+(this.m_z>>16)&this.mask,this.m_w=18e3*(this.m_w&65535)+(this.m_w>>16)&this.mask;let s=(this.m_z<<16)+(this.m_w&65535)>>>0;return s/=4294967296,(g-e)*s+e}}class E{constructor(g=new t.Vector3,e=new t.Euler,s=0,r=0,c=0,l=0,h=0){this.origin=g.clone(),this.orientation=e.clone(),this.length=s,this.radius=r,this.level=c,this.sectionCount=l,this.segmentCount=h}}const O={Birch:"birch",Oak:"oak",Pine:"pine",Willow:"willow"},V={Single:"single",Double:"double"},T={Ash:"ash",Aspen:"aspen",Beech:"beech",Evergreen:"evergreen",Oak:"oak"},x={Deciduous:"deciduous",Evergreen:"evergreen"},Q={seed:0,type:x.Deciduous,tint:16777215,flatShading:!1,textured:!0,levels:3,bark:{type:"oak",scale:1},branch:{angle:{1:60,2:60,3:60},children:{0:7,1:4,2:4},force:{direction:{x:0,y:1,z:0},strength:.01},gnarliness:{0:.2,1:.2,2:.05,3:.02},length:{0:20,1:15,2:5,3:1},radius:{0:.7,1:.7,2:.7,3:.7},sections:{0:12,1:10,2:8,3:6},segments:{0:8,1:6,2:4,3:3},start:{1:.5,2:.3,3:.3},taper:{0:.7,1:.7,2:.7,3:.7},twist:{0:0,1:0,2:0,3:0}},leaves:{type:T.Oak,billboard:V.Double,angle:30,count:3,start:0,size:1.75,sizeVariance:.7,tint:16777215,alphaTest:.5}},j={birch:{ao:"../src/textures/bark/birch_ao_1k.jpg",color:"../src/textures/bark/birch_color_1k.jpg",height:"../src/textures/bark/birch_height_1k.jpg",normal:"../src/textures/bark/birch_normal_1k.jpg",roughness:"../src/textures/bark/birch_roughness_1k.jpg"},oak:{ao:"../src/textures/bark/oak_ao_1k.jpg",color:"../src/textures/bark/oak_color_1k.jpg",height:"../src/textures/bark/oak_height_1k.jpg",normal:"../src/textures/bark/oak_normal_1k.jpg",roughness:"../src/textures/bark/oak_roughness_1k.jpg"},pine:{ao:"../src/textures/bark/pine_ao_1k.jpg",color:"../src/textures/bark/pine_color_1k.jpg",height:"../src/textures/bark/pine_height_1k.jpg",normal:"../src/textures/bark/pine_normal_1k.jpg",roughness:"../src/textures/bark/pine_roughness_1k.jpg"},willow:{ao:"../src/textures/bark/willow_ao_1k.jpg",color:"../src/textures/bark/willow_color_1k.jpg",height:"../src/textures/bark/willow_height_1k.jpg",normal:"../src/textures/bark/willow_normal_1k.jpg",roughness:"../src/textures/bark/willow_roughness_1k.jpg"}},C={ash:"../src/textures/leaves/ash.png",aspen:"../src/textures/leaves/aspen.png",beech:"../src/textures/leaves/beech.png",evergreen:"../src/textures/leaves/evergreen.png",oak:"../src/textures/leaves/oak.png"},S={},L=new t.TextureLoader,_=(m,g=new t.Vector2(1,1))=>{if(S[m]){const e=S[m];return e.wrapS=t.MirroredRepeatWrapping,e.wrapT=t.MirroredRepeatWrapping,e}else{const e=new URL(m,typeof document>"u"&&typeof location>"u"?require("url").pathToFileURL(__filename).href:typeof document>"u"?location.href:b&&b.src||new URL("@dgreenheck-tree-js.umd.js",document.baseURI).href).href,s=L.load(e);return S[m]=s,s}};class q extends t.Group{constructor(e=Q){super();v(this,"rng");v(this,"params");v(this,"branchQueue",[]);this.params=e,this.branchesMesh=new t.Mesh,this.leavesMesh=new t.Mesh,this.add(this.branchesMesh),this.add(this.leavesMesh)}async generate(){for(this.branches={verts:[],normals:[],indices:[],uvs:[]},this.leaves={verts:[],normals:[],indices:[],uvs:[]},this.rng=new z(this.params.seed),this.branchQueue.push(new E(new t.Vector3,new t.Euler,this.params.branch.length[0],this.params.branch.radius[0],0,this.params.branch.sections[0],this.params.branch.segments[0]));this.branchQueue.length>0;){const e=this.branchQueue.shift();this.generateBranch(e)}this.createBranchesGeometry(),this.createLeavesGeometry()}generateBranch(e){const s=this.branches.verts.length/3;let r=e.orientation.clone(),c=e.origin.clone(),l=e.length/e.sectionCount/(this.params.type==="Deciduous"?this.params.levels-1:1),h=[];for(let a=0;a<=e.sectionCount;a++){let o=e.radius;a===e.sectionCount&&e.level===this.params.levels?o=.001:this.params.type===x.Deciduous?o*=1-this.params.branch.taper[e.level]*(a/e.sectionCount):this.params.type===x.Evergreen&&(o*=1-a/e.sectionCount);let n;for(let f=0;f<e.segmentCount;f++){let w=2*Math.PI*f/e.segmentCount;const k=new t.Vector3(Math.cos(w),0,Math.sin(w)).multiplyScalar(o).applyEuler(r).add(c),y=new t.Vector3(Math.cos(w),0,Math.sin(w)).applyEuler(r).normalize(),B=new t.Vector2(f/e.segmentCount,a%2===0?0:1);this.branches.verts.push(...Object.values(k)),this.branches.normals.push(...Object.values(y)),this.branches.uvs.push(...Object.values(B)),f===0&&(n={vertex:k,normal:y,uv:B})}this.branches.verts.push(...Object.values(n.vertex)),this.branches.normals.push(...Object.values(n.normal)),this.branches.uvs.push(1,n.uv.y),h.push({origin:c.clone(),orientation:r.clone(),radius:o}),c.add(new t.Vector3(0,l,0).applyEuler(r));const i=Math.max(1,1/Math.sqrt(o))*this.params.branch.gnarliness[e.level];r.x+=this.rng.random(i,-i),r.z+=this.rng.random(i,-i);const d=new t.Quaternion().setFromEuler(r),M=new t.Quaternion().setFromAxisAngle(new t.Vector3(0,1,0),this.params.branch.twist[e.level]),A=new t.Quaternion().setFromUnitVectors(new t.Vector3(0,1,0),new t.Vector3().copy(this.params.branch.force.direction));d.multiply(M),d.rotateTowards(A,this.params.branch.force.strength/o),r.setFromQuaternion(d)}if(this.generateBranchIndices(s,e),this.params.type==="deciduous"){const a=h[h.length-1];e.level<this.params.levels?this.branchQueue.push(new E(a.origin,a.orientation,this.params.branch.length[e.level+1]/2,a.radius,e.level+1,e.sectionCount,e.segmentCount)):this.generateLeaf(a.origin,a.orientation)}e.level===this.params.levels?this.generateLeaves(h):e.level<this.params.levels&&this.generateChildBranches(this.params.branch.children[e.level],e.level+1,h)}generateChildBranches(e,s,r){const c=this.rng.random();for(let l=0;l<e;l++){let h=this.rng.random(1,this.params.branch.start[s]);const a=Math.floor(h*(r.length-1));let o,n;o=r[a],a===r.length-1?n=o:n=r[a+1];const i=(h-a/(r.length-1))/(1/(r.length-1)),d=new t.Vector3().lerpVectors(o.origin,n.origin,i),M=this.params.branch.radius[s]*((1-i)*o.radius+i*n.radius),A=new t.Quaternion().setFromEuler(o.orientation),f=new t.Quaternion().setFromEuler(n.orientation),w=new t.Euler().setFromQuaternion(f.slerp(A,i)),k=2*Math.PI*(c+l/e),y=new t.Quaternion().setFromAxisAngle(new t.Vector3(1,0,0),this.params.branch.angle[s]/(180/Math.PI)),B=new t.Quaternion().setFromAxisAngle(new t.Vector3(0,1,0),k),I=new t.Quaternion().setFromEuler(w),P=new t.Euler().setFromQuaternion(I.multiply(B.multiply(y)));let R=this.params.branch.length[s]*(this.params.type===x.Evergreen?1-h:1);this.branchQueue.push(new E(d,P,R,M,s,this.params.branch.sections[s],this.params.branch.segments[s]))}}generateLeaves(e){const s=this.rng.random();for(let r=0;r<this.params.leaves.count;r++){let c=this.rng.random(1,this.params.leaves.start);const l=Math.floor(c*(e.length-1));let h,a;h=e[l],l===e.length-1?a=h:a=e[l+1];const o=(c-l/(e.length-1))/(1/(e.length-1)),n=new t.Vector3().lerpVectors(h.origin,a.origin,o),i=new t.Quaternion().setFromEuler(h.orientation),d=new t.Quaternion().setFromEuler(a.orientation),M=new t.Euler().setFromQuaternion(d.slerp(i,o)),A=2*Math.PI*(s+r/this.params.leaves.count),f=new t.Quaternion().setFromAxisAngle(new t.Vector3(1,0,0),this.params.leaves.angle/(180/Math.PI)),w=new t.Quaternion().setFromAxisAngle(new t.Vector3(0,1,0),A),k=new t.Quaternion().setFromEuler(M),y=new t.Euler().setFromQuaternion(k.multiply(w.multiply(f)));this.generateLeaf(n,y)}}generateLeaf(e,s){let r=this.leaves.verts.length/3,c=this.params.leaves.size*(1+this.rng.random(this.params.leaves.sizeVariance,-this.params.leaves.sizeVariance));const l=c,h=1.5*c,a=o=>{const n=[new t.Vector3(-l/2,h,0),new t.Vector3(-l/2,0,0),new t.Vector3(l/2,0,0),new t.Vector3(l/2,h,0)].map(d=>d.applyEuler(new t.Euler(0,o,0)).applyEuler(s).add(e));this.leaves.verts.push(n[0].x,n[0].y,n[0].z,n[1].x,n[1].y,n[1].z,n[2].x,n[2].y,n[2].z,n[3].x,n[3].y,n[3].z);const i=new t.Vector3(0,0,1).applyEuler(s);this.leaves.normals.push(i.x,i.y,i.z,i.x,i.y,i.z,i.x,i.y,i.z,i.x,i.y,i.z),this.leaves.uvs.push(0,1,0,0,1,0,1,1),this.leaves.indices.push(r,r+1,r+2,r,r+2,r+3),r+=4};a(0),this.params.leaves.billboard===V.Double&&a(Math.PI/2)}generateBranchIndices(e,s){let r,c,l,h;const a=s.segmentCount+1;for(let o=0;o<s.sectionCount;o++)for(let n=0;n<s.segmentCount;n++)r=e+o*a+n,c=e+o*a+(n+1),l=r+a,h=c+a,this.branches.indices.push(r,l,c,c,l,h)}createBranchesGeometry(){const e=new t.BufferGeometry;e.setAttribute("position",new t.BufferAttribute(new Float32Array(this.branches.verts),3)),e.setAttribute("normal",new t.BufferAttribute(new Float32Array(this.branches.normals),3)),e.setAttribute("uv",new t.BufferAttribute(new Float32Array(this.branches.uvs),2)),e.setIndex(new t.BufferAttribute(new Uint16Array(this.branches.indices),1)),e.computeBoundingSphere();const s=new t.MeshStandardMaterial({name:"branches",flatShading:this.params.flatShading,color:this.params.tint});this.branchesMesh.geometry.dispose(),this.branchesMesh.geometry=e,this.branchesMesh.material.dispose(),this.branchesMesh.material=s,this.branchesMesh.castShadow=!0,this.branchesMesh.receiveShadow=!0,this.params.textured&&(this.branchesMesh.material.aoMap=_(j[this.params.bark.type].ao,this.params.bark.scale),this.branchesMesh.material.map=_(j[this.params.bark.type].color,this.params.bark.scale),this.branchesMesh.material.normalMap=_(j[this.params.bark.type].normal,this.params.bark.scale),this.branchesMesh.material.roughnessMap=_(j[this.params.bark.type].roughness,this.params.bark.scale))}createLeavesGeometry(){const e=new t.BufferGeometry;e.setAttribute("position",new t.BufferAttribute(new Float32Array(this.leaves.verts),3)),e.setAttribute("uv",new t.BufferAttribute(new Float32Array(this.leaves.uvs),2)),e.setIndex(new t.BufferAttribute(new Uint16Array(this.leaves.indices),1)),e.computeVertexNormals(),e.computeBoundingSphere();const s=new t.MeshStandardMaterial({name:"leaves",color:this.params.leaves.tint,side:t.DoubleSide,alphaTest:this.params.leaves.alphaTest});this.leavesMesh.geometry.dispose(),this.leavesMesh.geometry=e,this.leavesMesh.material.dispose(),this.leavesMesh.material=s,this.leavesMesh.material.map=_(C[this.params.leaves.type]),this.leavesMesh.castShadow=!0,this.leavesMesh.receiveShadow=!0}}u.BarkType=O,u.Billboard=V,u.LeafType=T,u.Tree=q,u.TreeType=x,Object.defineProperty(u,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
