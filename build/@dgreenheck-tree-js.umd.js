(function(u,m){typeof exports=="object"&&typeof module<"u"?m(exports,require("three")):typeof define=="function"&&define.amd?define(["exports","three"],m):(u=typeof globalThis<"u"?globalThis:u||self,m(u["@dgreenheck-tree-js"]={},u.THREE))})(this,function(u,m){"use strict";var D=Object.defineProperty;var G=(u,m,b)=>m in u?D(u,m,{enumerable:!0,configurable:!0,writable:!0,value:b}):u[m]=b;var v=(u,m,b)=>(G(u,typeof m!="symbol"?m+"":m,b),b);var b=typeof document<"u"?document.currentScript:null;function O(g){const p=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(g){for(const e in g)if(e!=="default"){const r=Object.getOwnPropertyDescriptor(g,e);Object.defineProperty(p,e,r.get?r:{enumerable:!0,get:()=>g[e]})}}return p.default=g,Object.freeze(p)}const t=O(m);class z{constructor(p){v(this,"m_w",123456789);v(this,"m_z",987654321);v(this,"mask",4294967295);this.m_w=123456789+p&this.mask,this.m_z=987654321-p&this.mask}random(p=1,e=0){this.m_z=36969*(this.m_z&65535)+(this.m_z>>16)&this.mask,this.m_w=18e3*(this.m_w&65535)+(this.m_w>>16)&this.mask;let r=(this.m_z<<16)+(this.m_w&65535)>>>0;return r/=4294967296,(p-e)*r+e}}class S{constructor(p=new t.Vector3,e=new t.Euler,r=0,s=0,c=0,l=0,h=0){this.origin=p.clone(),this.orientation=e.clone(),this.length=r,this.radius=s,this.level=c,this.sectionCount=l,this.segmentCount=h}}const T={Birch:"birch",Oak:"oak",Pine:"pine",Willow:"willow"},E={Single:"single",Double:"double"},F={Ash:"ash",Aspen:"aspen",Beech:"beech",Evergreen:"evergreen",Oak:"oak"},x={Deciduous:"deciduous",Evergreen:"evergreen"},Q={seed:0,type:x.Deciduous,bark:{type:T.Oak,tint:16777215,flatShading:!1,textured:!0,textureScale:{x:1,y:1}},branch:{levels:3,angle:{1:70,2:60,3:60},children:{0:7,1:7,2:5},force:{direction:{x:0,y:1,z:0},strength:.01},gnarliness:{0:.15,1:.2,2:.3,3:.02},length:{0:20,1:20,2:10,3:1},radius:{0:1.5,1:.7,2:.7,3:.7},sections:{0:12,1:10,2:8,3:6},segments:{0:8,1:6,2:4,3:3},start:{1:.4,2:.3,3:.3},taper:{0:.7,1:.7,2:.7,3:.7},twist:{0:0,1:0,2:0,3:0}},leaves:{type:F.Oak,billboard:E.Double,angle:10,count:1,start:0,size:2.5,sizeVariance:.7,tint:16777215,alphaTest:.5}},j={birch:{ao:"../src/textures/bark/birch_ao_1k.jpg",color:"../src/textures/bark/birch_color_1k.jpg",height:"../src/textures/bark/birch_height_1k.jpg",normal:"../src/textures/bark/birch_normal_1k.jpg",roughness:"../src/textures/bark/birch_roughness_1k.jpg"},oak:{ao:"../src/textures/bark/oak_ao_1k.jpg",color:"../src/textures/bark/oak_color_1k.jpg",height:"../src/textures/bark/oak_height_1k.jpg",normal:"../src/textures/bark/oak_normal_1k.jpg",roughness:"../src/textures/bark/oak_roughness_1k.jpg"},pine:{ao:"../src/textures/bark/pine_ao_1k.jpg",color:"../src/textures/bark/pine_color_1k.jpg",height:"../src/textures/bark/pine_height_1k.jpg",normal:"../src/textures/bark/pine_normal_1k.jpg",roughness:"../src/textures/bark/pine_roughness_1k.jpg"},willow:{ao:"../src/textures/bark/willow_ao_1k.jpg",color:"../src/textures/bark/willow_color_1k.jpg",height:"../src/textures/bark/willow_height_1k.jpg",normal:"../src/textures/bark/willow_normal_1k.jpg",roughness:"../src/textures/bark/willow_roughness_1k.jpg"}},C={ash:"../src/textures/leaves/ash.png",aspen:"../src/textures/leaves/aspen.png",beech:"../src/textures/leaves/beech.png",evergreen:"../src/textures/leaves/evergreen.png",oak:"../src/textures/leaves/oak.png"},V={},L=new t.TextureLoader,_=(g,p={x:1,y:1},e=null)=>{if(!V[g]){const s=new URL(g,typeof document>"u"&&typeof location>"u"?require("url").pathToFileURL(__filename).href:typeof document>"u"?location.href:b&&b.src||new URL("@dgreenheck-tree-js.umd.js",document.baseURI).href).href;V[g]=L.load(s)}const r=V[g];return r.wrapS=t.MirroredRepeatWrapping,r.wrapT=t.MirroredRepeatWrapping,r.repeat.x=p.x,r.repeat.y=1/p.y,e&&(r.colorSpace=e,r.premultiplyAlpha=!0),r};class q extends t.Group{constructor(e=Q){super();v(this,"rng");v(this,"params");v(this,"branchQueue",[]);this.params=e,this.branchesMesh=new t.Mesh,this.leavesMesh=new t.Mesh,this.add(this.branchesMesh),this.add(this.leavesMesh)}generate(){for(this.branches={verts:[],normals:[],indices:[],uvs:[]},this.leaves={verts:[],normals:[],indices:[],uvs:[]},this.rng=new z(this.params.seed),this.branchQueue.push(new S(new t.Vector3,new t.Euler,this.params.branch.length[0],this.params.branch.radius[0],0,this.params.branch.sections[0],this.params.branch.segments[0]));this.branchQueue.length>0;){const e=this.branchQueue.shift();this.generateBranch(e)}this.createBranchesGeometry(),this.createLeavesGeometry()}generateBranch(e){const r=this.branches.verts.length/3;let s=e.orientation.clone(),c=e.origin.clone(),l=e.length/e.sectionCount/(this.params.type==="Deciduous"?this.params.branch.levels-1:1),h=[];for(let a=0;a<=e.sectionCount;a++){let o=e.radius;a===e.sectionCount&&e.level===this.params.branch.levels?o=.001:this.params.type===x.Deciduous?o*=1-this.params.branch.taper[e.level]*(a/e.sectionCount):this.params.type===x.Evergreen&&(o*=1-a/e.sectionCount);let n;for(let f=0;f<e.segmentCount;f++){let w=2*Math.PI*f/e.segmentCount;const y=new t.Vector3(Math.cos(w),0,Math.sin(w)).multiplyScalar(o).applyEuler(s).add(c),k=new t.Vector3(Math.cos(w),0,Math.sin(w)).applyEuler(s).normalize(),B=new t.Vector2(f/e.segmentCount,a%2===0?0:1);this.branches.verts.push(...Object.values(y)),this.branches.normals.push(...Object.values(k)),this.branches.uvs.push(...Object.values(B)),f===0&&(n={vertex:y,normal:k,uv:B})}this.branches.verts.push(...Object.values(n.vertex)),this.branches.normals.push(...Object.values(n.normal)),this.branches.uvs.push(1,n.uv.y),h.push({origin:c.clone(),orientation:s.clone(),radius:o}),c.add(new t.Vector3(0,l,0).applyEuler(s));const i=Math.max(1,1/Math.sqrt(o))*this.params.branch.gnarliness[e.level];s.x+=this.rng.random(i,-i),s.z+=this.rng.random(i,-i);const d=new t.Quaternion().setFromEuler(s),M=new t.Quaternion().setFromAxisAngle(new t.Vector3(0,1,0),this.params.branch.twist[e.level]),A=new t.Quaternion().setFromUnitVectors(new t.Vector3(0,1,0),new t.Vector3().copy(this.params.branch.force.direction));d.multiply(M),d.rotateTowards(A,this.params.branch.force.strength/o),s.setFromQuaternion(d)}if(this.generateBranchIndices(r,e),this.params.type==="deciduous"){const a=h[h.length-1];e.level<this.params.branch.levels?this.branchQueue.push(new S(a.origin,a.orientation,this.params.branch.length[e.level+1],a.radius,e.level+1,e.sectionCount,e.segmentCount)):this.generateLeaf(a.origin,a.orientation)}e.level===this.params.branch.levels?this.generateLeaves(h):e.level<this.params.branch.levels&&this.generateChildBranches(this.params.branch.children[e.level],e.level+1,h)}generateChildBranches(e,r,s){const c=this.rng.random();for(let l=0;l<e;l++){let h=this.rng.random(1,this.params.branch.start[r]);const a=Math.floor(h*(s.length-1));let o,n;o=s[a],a===s.length-1?n=o:n=s[a+1];const i=(h-a/(s.length-1))/(1/(s.length-1)),d=new t.Vector3().lerpVectors(o.origin,n.origin,i),M=this.params.branch.radius[r]*((1-i)*o.radius+i*n.radius),A=new t.Quaternion().setFromEuler(o.orientation),f=new t.Quaternion().setFromEuler(n.orientation),w=new t.Euler().setFromQuaternion(f.slerp(A,i)),y=2*Math.PI*(c+l/e),k=new t.Quaternion().setFromAxisAngle(new t.Vector3(1,0,0),this.params.branch.angle[r]/(180/Math.PI)),B=new t.Quaternion().setFromAxisAngle(new t.Vector3(0,1,0),y),I=new t.Quaternion().setFromEuler(w),R=new t.Euler().setFromQuaternion(I.multiply(B.multiply(k)));let P=this.params.branch.length[r]*(this.params.type===x.Evergreen?1-h:1);this.branchQueue.push(new S(d,R,P,M,r,this.params.branch.sections[r],this.params.branch.segments[r]))}}generateLeaves(e){const r=this.rng.random();for(let s=0;s<this.params.leaves.count;s++){let c=this.rng.random(1,this.params.leaves.start);const l=Math.floor(c*(e.length-1));let h,a;h=e[l],l===e.length-1?a=h:a=e[l+1];const o=(c-l/(e.length-1))/(1/(e.length-1)),n=new t.Vector3().lerpVectors(h.origin,a.origin,o),i=new t.Quaternion().setFromEuler(h.orientation),d=new t.Quaternion().setFromEuler(a.orientation),M=new t.Euler().setFromQuaternion(d.slerp(i,o)),A=2*Math.PI*(r+s/this.params.leaves.count),f=new t.Quaternion().setFromAxisAngle(new t.Vector3(1,0,0),this.params.leaves.angle/(180/Math.PI)),w=new t.Quaternion().setFromAxisAngle(new t.Vector3(0,1,0),A),y=new t.Quaternion().setFromEuler(M),k=new t.Euler().setFromQuaternion(y.multiply(w.multiply(f)));this.generateLeaf(n,k)}}generateLeaf(e,r){let s=this.leaves.verts.length/3,c=this.params.leaves.size*(1+this.rng.random(this.params.leaves.sizeVariance,-this.params.leaves.sizeVariance));const l=c,h=1.5*c,a=o=>{const n=[new t.Vector3(-l/2,h,0),new t.Vector3(-l/2,0,0),new t.Vector3(l/2,0,0),new t.Vector3(l/2,h,0)].map(d=>d.applyEuler(new t.Euler(0,o,0)).applyEuler(r).add(e));this.leaves.verts.push(n[0].x,n[0].y,n[0].z,n[1].x,n[1].y,n[1].z,n[2].x,n[2].y,n[2].z,n[3].x,n[3].y,n[3].z);const i=new t.Vector3(0,0,1).applyEuler(r);this.leaves.normals.push(i.x,i.y,i.z,i.x,i.y,i.z,i.x,i.y,i.z,i.x,i.y,i.z),this.leaves.uvs.push(0,1,0,0,1,0,1,1),this.leaves.indices.push(s,s+1,s+2,s,s+2,s+3),s+=4};a(0),this.params.leaves.billboard===E.Double&&a(Math.PI/2)}generateBranchIndices(e,r){let s,c,l,h;const a=r.segmentCount+1;for(let o=0;o<r.sectionCount;o++)for(let n=0;n<r.segmentCount;n++)s=e+o*a+n,c=e+o*a+(n+1),l=s+a,h=c+a,this.branches.indices.push(s,l,c,c,l,h)}createBranchesGeometry(){const e=new t.BufferGeometry;e.setAttribute("position",new t.BufferAttribute(new Float32Array(this.branches.verts),3)),e.setAttribute("normal",new t.BufferAttribute(new Float32Array(this.branches.normals),3)),e.setAttribute("uv",new t.BufferAttribute(new Float32Array(this.branches.uvs),2)),e.setIndex(new t.BufferAttribute(new Uint16Array(this.branches.indices),1)),e.computeBoundingSphere();const r=new t.MeshStandardMaterial({name:"branches",flatShading:this.params.bark.flatShading,color:this.params.bark.tint});if(this.branchesMesh.geometry.dispose(),this.branchesMesh.geometry=e,this.branchesMesh.material.dispose(),this.branchesMesh.material=r,this.branchesMesh.castShadow=!0,this.branchesMesh.receiveShadow=!0,this.params.bark.textured){const s=this.params.bark.textureScale;this.branchesMesh.material.aoMap=_(j[this.params.bark.type].ao,s),this.branchesMesh.material.map=_(j[this.params.bark.type].color,s),this.branchesMesh.material.normalMap=_(j[this.params.bark.type].normal,s),this.branchesMesh.material.roughnessMap=_(j[this.params.bark.type].roughness,s)}}createLeavesGeometry(){const e=new t.BufferGeometry;e.setAttribute("position",new t.BufferAttribute(new Float32Array(this.leaves.verts),3)),e.setAttribute("uv",new t.BufferAttribute(new Float32Array(this.leaves.uvs),2)),e.setIndex(new t.BufferAttribute(new Uint16Array(this.leaves.indices),1)),e.computeVertexNormals(),e.computeBoundingSphere();const r=new t.MeshStandardMaterial({name:"leaves",color:this.params.leaves.tint,side:t.DoubleSide,alphaTest:this.params.leaves.alphaTest});this.leavesMesh.geometry.dispose(),this.leavesMesh.geometry=e,this.leavesMesh.material.dispose(),this.leavesMesh.material=r,this.leavesMesh.material.map=_(C[this.params.leaves.type],new t.Vector2(1,1),t.SRGBColorSpace),this.leavesMesh.castShadow=!0,this.leavesMesh.receiveShadow=!0}}u.BarkType=T,u.Billboard=E,u.LeafType=F,u.Tree=q,u.TreeType=x,Object.defineProperty(u,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=@dgreenheck-tree-js.umd.js.map
